name: Docker Build, Push to Docker Hub, and Deploy to KIND Cluster on EC2

on:
  push:
    branches:
      - main
  release:
    types:
      - published  # Trigger when a release is published

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get Release Tag or Default to v1.0.0
      id: get-release-tag
      run: |
        if [[ -n "${{ github.event.release.tag_name }}" ]]; then
          # Use the release tag name as the Docker image version
          RELEASE_TAG=${{ github.event.release.tag_name }}
        else
          # Default to v1.0.0 if no release tag is provided
          RELEASE_TAG="v1.0.0"
        fi
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/app:${{ env.RELEASE_TAG }} .
        docker build -t ${{ secrets.DOCKER_USERNAME }}/db:${{ env.RELEASE_TAG }} .

    - name: Push Docker Image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/app:${{ env.RELEASE_TAG }}
        docker push ${{ secrets.DOCKER_USERNAME }}/db:${{ env.RELEASE_TAG }}
        docker tag ${{ secrets.DOCKER_USERNAME }}/app:${{ env.RELEASE_TAG }} ${{ secrets.DOCKER_USERNAME }}/app:latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/db:${{ env.RELEASE_TAG }} ${{ secrets.DOCKER_USERNAME }}/db:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/app:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/db:latest

  deploy:
    runs-on: self-hosted
    needs: build

    steps:
    - name: Load Docker Image into KIND Cluster
      run: |
        kind load docker-image ${{ secrets.DOCKER_USERNAME }}/app:${{ env.RELEASE_TAG }} --name kind-cluster
        kind load docker-image ${{ secrets.DOCKER_USERNAME }}/db:${{ env.RELEASE_TAG }} --name kind-cluster

    # Substitute DOCKER_USERNAME and RELEASE_TAG in the deployment.yaml file
    - name: Deploy to Kubernetes on KIND
      run: |
        # Substitute Docker username and release tag into deployment.yaml using sed
        sed "s|\${DOCKER_USERNAME}|${{ secrets.DOCKER_USERNAME }}|g" ./'Baxture Assignment'/deployment.yaml | sed "s|\${RELEASE_TAG}|${{ env.RELEASE_TAG }}|g" | kubectl apply -f -
        
        # Check the status of the deployments
        kubectl rollout status deployment/database
        kubectl rollout status deployment/application

      # Expose the application (ensure it's running before checking)
    - name: Check if application is accessible externally
      run: |
        kubectl get svc application-service  # You can check the NodePort assignment
